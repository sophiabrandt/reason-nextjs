// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Post$ReasonNextjs from "../src/components/Post.bs.js";
import * as Section$ReasonNextjs from "../src/components/layout/Section.bs.js";
import * as Query$ReasonApolloHooks from "reason-apollo-hooks/src/Query.bs.js";

var ppx_printed_query = "query ListPostsQuery  {\nlistPosts  {\nitems  {\nid  \ntitle  \nbody  \ncreatedAt  \nupdatedAt  \ntags  \nauthor  {\nfirstName  \nlastName  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "listPosts");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(Caml_option.valFromOption(match$3), "items");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$2 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$2);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeArray(value$2);
              tmp$2 = match$6 !== undefined ? match$6.map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return ;
                        } else {
                          var match$1 = Js_json.decodeObject(value);
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$1 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_dict.get(value$1, "id");
                            var tmp$1;
                            if (match$2 !== undefined) {
                              var value$2 = Caml_option.valFromOption(match$2);
                              var match$3 = Js_json.decodeString(value$2);
                              tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                            } else {
                              tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Post is missing");
                            }
                            var match$4 = Js_dict.get(value$1, "title");
                            var tmp$2;
                            if (match$4 !== undefined) {
                              var value$3 = Caml_option.valFromOption(match$4);
                              var match$5 = Js_json.decodeString(value$3);
                              tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                            } else {
                              tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type Post is missing");
                            }
                            var match$6 = Js_dict.get(value$1, "body");
                            var tmp$3;
                            if (match$6 !== undefined) {
                              var value$4 = Caml_option.valFromOption(match$6);
                              var match$7 = Js_json.decodeString(value$4);
                              tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                            } else {
                              tmp$3 = Js_exn.raiseError("graphql_ppx: Field body on type Post is missing");
                            }
                            var match$8 = Js_dict.get(value$1, "createdAt");
                            var tmp$4;
                            if (match$8 !== undefined) {
                              var value$5 = Caml_option.valFromOption(match$8);
                              var match$9 = Js_json.decodeNull(value$5);
                              tmp$4 = match$9 !== undefined ? undefined : Caml_option.some(value$5);
                            } else {
                              tmp$4 = undefined;
                            }
                            var match$10 = Js_dict.get(value$1, "updatedAt");
                            var tmp$5;
                            if (match$10 !== undefined) {
                              var value$6 = Caml_option.valFromOption(match$10);
                              var match$11 = Js_json.decodeNull(value$6);
                              tmp$5 = match$11 !== undefined ? undefined : Caml_option.some(value$6);
                            } else {
                              tmp$5 = undefined;
                            }
                            var match$12 = Js_dict.get(value$1, "tags");
                            var tmp$6;
                            if (match$12 !== undefined) {
                              var value$7 = Caml_option.valFromOption(match$12);
                              var match$13 = Js_json.decodeArray(value$7);
                              tmp$6 = match$13 !== undefined ? match$13.map((function (value) {
                                        var match = Js_json.decodeString(value);
                                        if (match !== undefined) {
                                          return match;
                                        } else {
                                          return Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value));
                                        }
                                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$7));
                            } else {
                              tmp$6 = Js_exn.raiseError("graphql_ppx: Field tags on type Post is missing");
                            }
                            var match$14 = Js_dict.get(value$1, "author");
                            var tmp$7;
                            if (match$14 !== undefined) {
                              var match$15 = Js_json.decodeObject(Caml_option.valFromOption(match$14));
                              if (match$15 !== undefined) {
                                var value$8 = Caml_option.valFromOption(match$15);
                                var match$16 = Js_dict.get(value$8, "firstName");
                                var tmp$8;
                                if (match$16 !== undefined) {
                                  var value$9 = Caml_option.valFromOption(match$16);
                                  var match$17 = Js_json.decodeString(value$9);
                                  tmp$8 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                                } else {
                                  tmp$8 = Js_exn.raiseError("graphql_ppx: Field firstName on type Author is missing");
                                }
                                var match$18 = Js_dict.get(value$8, "lastName");
                                var tmp$9;
                                if (match$18 !== undefined) {
                                  var value$10 = Caml_option.valFromOption(match$18);
                                  var match$19 = Js_json.decodeString(value$10);
                                  tmp$9 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                                } else {
                                  tmp$9 = Js_exn.raiseError("graphql_ppx: Field lastName on type Author is missing");
                                }
                                tmp$7 = {
                                  firstName: tmp$8,
                                  lastName: tmp$9
                                };
                              } else {
                                tmp$7 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                            } else {
                              tmp$7 = Js_exn.raiseError("graphql_ppx: Field author on type Post is missing");
                            }
                            tmp = {
                              id: tmp$1,
                              title: tmp$2,
                              body: tmp$3,
                              createdAt: tmp$4,
                              updatedAt: tmp$5,
                              tags: tmp$6,
                              author: tmp$7
                            };
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                          }
                          return Caml_option.some(tmp);
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$2));
            }
          } else {
            tmp$2 = undefined;
          }
          tmp$1 = {
            items: tmp$2
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            listPosts: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ListPostsQueryConfig = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var ListPostQuery = Query$ReasonApolloHooks.Make([
      ppx_printed_query,
      parse
    ]);

function parseDate(createdAt) {
  var __x = Js_json.decodeString(Belt_Option.getWithDefault(createdAt, null));
  return Belt_Option.getWithDefault(__x, "");
}

function Posts(Props) {
  var match = Curry._8(ListPostQuery[/* use */0], undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);
  var simple = match[0];
  var tmp;
  tmp = typeof simple === "number" ? (
      simple === 0 ? React.createElement("p", undefined, "Loading...") : React.createElement("p", undefined, "No posts sad reacts only!")
    ) : (
      simple.tag ? React.createElement("p", undefined, "No posts sad reacts only!") : Belt_Option.mapWithDefault(Belt_Option.flatMap(simple[0].listPosts, (function (listPosts) {
                    return listPosts.items;
                  })), null, (function (items) {
                return Belt_Array.map(items, (function (item) {
                              return Belt_Option.mapWithDefault(item, null, (function (item) {
                                            var parsedCreatedAt = parseDate(item.createdAt);
                                            return React.createElement(Post$ReasonNextjs.make, {
                                                        title: item.title,
                                                        body: item.body,
                                                        tags: item.tags,
                                                        firstName: item.author.firstName,
                                                        lastName: item.author.lastName,
                                                        createdAt: parsedCreatedAt,
                                                        key: item.title
                                                      });
                                          }));
                            }));
              }))
    );
  return React.createElement(Section$ReasonNextjs.make, {
              title: "My blog",
              subtitle: "A blog application demonstrating ReasonML, ReasonReact and Next.js",
              children: React.createElement("div", {
                    className: "columns is-multiline"
                  }, tmp)
            });
}

var make$1 = Posts;

var $$default = Posts;

export {
  ListPostsQueryConfig ,
  ListPostQuery ,
  parseDate ,
  make$1 as make,
  $$default ,
  $$default as default,
  
}
/* ListPostQuery Not a pure module */
